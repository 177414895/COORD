为了完成贪吃蛇的排行榜功能，复习了文件流相关的知识
为了通过流对文件进行操作，应先建立文件流对象，如下所示：
ifstream iFile;
ofstream oFile;
fstream ioFile;
这里定义了iFile，oFile，ioFile三个文件流对象。iFile是输入文件流对象；oFile是输出文件流对象；ioFile是输入输出文件流对象。
打开文件
在fstream类中，有一个成员函数open()，就是用来打开文件的，其原型是： [1] 
voidopen(constchar*filename,intmode,intaccess);
参数：
filename：要打开的文件名
mode：要打开文件的方式
access：打开文件的属性
打开文件的方式在类ios(是所有流式I/O类的基类)中定义，常用的值如下：
ios::app：以追加的方式打开文件
ios::ate：文件打开后定位到文件尾，ios:app就包含有此属性
ios::binary：以
二进制方式打开文件，缺省的方式是文本方式。两种方式的区别见前文
ios::in：文件以输入方式打开
ios::out：文件以输出方式打开
ios::nocreate：不建立文件，所以文件不存在时打开失败
ios::noreplace：不覆盖文件，所以保存文件时如果文件存在失败
ios::trunc：如果文件存在，把文件长度设为0
可以用“或”把以上属性连接起来，如ios::out|ios::binary
打开文件的属性取值是：
0：普通文件，打开访问
1：只读文件
2：隐含文件
4：系统文件
可以用“或”或者“+”把以上属性连接起来 ，如3或1|2就是以只读和隐含属性打开文件。
例如：以二进制输入方式打开文件c:config.sys
fstreamfile1;
file1.open("c:config.sys",ios::binary|ios::in,0);
如果open函数只有文件名一个参数，则是以读/写普通文件打开，即：
file1.open("c:
config.sys");<=>file1.open("c:config.sys",ios::in|ios::out,0);
另外，fstream还有和open()一样的构造函数，对于上例，在定义的时候就可以打开文件了：
fstreamfile1("c:config.sys");
特别提出的是，fstream有两个子类：ifstream(input file stream)和ofstream(output file stream)，ifstream默认以输入方式打开文件，而ofstream默认以输出方式打开文件。
ifstreamfile2("c:pdos.def");//以输入方式打开文件
ofstreamfile3("c:x.123");//以输出方式打开文件
所以，在实际应用中，根据需要的不同，选择不同的类来定义：如果想以输入方式打开，就用ifstream来定义；如果想以输出方式打开，就用ofstream来定义；如果想以输入/输出方式来打开，就用fstream来定义。
包含：
需要在文件中包含<fstream>，即：
#include<fstream>
后面可以加using namespace std;程序里就可以直接用fstream类及其函数了。
或者在具体使用时用std::来标识，如：std::fstream file1;
例如：fstream file;
file.open("filename.txt",ios::out);
关闭文件
打开的文件使用完成后一定要关闭，fstream提供了成员函数close()来完成此操作，如：file1.close();就把file1相连的文件关闭。
读写文件
读写文件分为文本文件和二进制文件的读取，对于文本文件的读取比较简单，用插入器和析取器就可以了；而对于二进制的读取就要复杂些，下面就详细的介绍这两种方式
1、文本文件的读写
文本文件的读写很简单：用插入器(<<)向文件输出；用析取器(>>)从文件输入。假设file1是以输入方式打开，file2以输出打开。示例如下：
file2<<"I Love You";//向文件写入字符串"I Love You"
int i;
file1>>i;//从文件输入一个整数值。
这种方式还有一种简单的格式化能力，比如可以指定输出为16进制等等，具体的格式有以下一些
操纵符 功能 输入/输出
dec格式化为
十进制数值数据输入和输出
endl输出一个
换行符并刷新此流输出
ends输出一个空字符输出
hex格式化为
十六进制数值数据输入和输出
oct格式化为
八进制数值数据输入和输出
//setpxecision(intp)设置
浮点数的精度位数输出
 
setprecision(intp)设置浮点数的精度位数输出
（setpxecision应该为setprecision,使用时需要包含头文件：#include <iomanip.h>）
//比如要把123当作十六进制输出：file1<<hex<<123;要把3.1415926以5位精度输出：file1<<setprecision(5)<<3.1415926。
2、二进制文件的读写
①put()
put()函数向流写入一个字符，其原型是ofstream &put(char ch)，使用也比较简单，如file1.put('c');就是向流写一个字符'c'。
②get()
get()函数比较灵活，有3种常用的重载形式：
一种就是和put()对应的形式：ifstream &get(char &ch);功能是从流中读取一个字符，结果保存在引用ch中，如果到文件尾，返回空字符。如file2.get(x);表示从文件中读取一个字符，并把读取的字符保存在x中。
另一种重载形式的原型是： int get();这种形式是从流中返回一个字符，如果到达文件尾，返回EOF，如x=file2.get();和上例功能是一样的。
还有一种形式的原型是：ifstream &get(char *buf,int num,char delim='n')；这种形式把字符读入由 buf 指向的数组，直到读入了 num 个字符或遇到了由 delim 指定的字符，如果没使用 delim 这个参数，将使用缺省值换行符'n'。例如：
file2.get(str1,127,'A');//从文件中读取字符到字符串str1，当遇到字符'A'或读取了127个字符时终止。
③读写数据块
要读写二进制数据块，使用成员函数read()和write()成员函数，它们原型如下：
read(unsigned char *buf,int num);
write(const unsigned char *buf,int num);
read()从文件中读取 num 个字符到 buf 指向的缓存中，如果在还未读入 num 个字符时就到了文件尾，可以用成员函数 int gcount();来取得实际读取的字符数；而 write() 从buf 指向的缓存写 num 个字符到文件中，值得注意的是缓存的类型是 unsigned char *，有时可能需要类型转换。
例：
unsigned char str1[]="ILoveYou";
int n[5];
ifstream in("xxx.xxx");
ofstream out("yyy.yyy");
out.write(str1,strlen(str1));            
in.read((unsignedchar*)n,sizeof(n));   
in.close();
out.close();
检测EOF
成员函数eof()用来检测是否到达文件尾，如果到达文件尾返回非0值，否则返回0。原型是int eof();
例： if(in.eof())ShowMessage("已经到达文件尾！");
出现eof标志如果用clear()，eof标志会被清除，这时需要手动检查或在下一次操作时重新置位
手动检查
autolastpos=in,
tellg();
in.seekg(0,ios::end);
autoendpos=in.tellg();
in.seekg(lastpos);
文件定位
和C的文件操作方式不同的是，C++ I/O系统管理两个与一个文件相联系的指针。一个是读指针，它说明输入操作在文件中的位置；另一个是写指针，它下次写操作的位置。每次执行输入或输出时，相应的指针自动变化。所以，C++的文件定位分为读位置和写位置的定位，对应的成员函数是 seekg()和 seekp()，seekg()是设置读位置，seekp是设置写位置。
使用seekg和seekp时移动的是同一个指针，可以通过下面程序检测
fstreamfile;
    file.open("1.txt",ios::binary|ios::
trunc|ios::in|ios::out);
    file.write("ABCDEFGHIJ",10);
    printf("%u\n",(
size_t)file.tellp());
    file.seekg(0,ios::beg);
    printf("%u\n",(size_t)file.tellp());
;
streamoff定义于 iostream.h 中，定义有偏移量 offset 所能取得的最大值，seek_dir 表示移动的基准位置，是一个有以下值的枚举：
ios::beg：文件开头
ios::cur：文件当前位置
ios::end：文件结尾
这两个函数一般用于二进制文件，因为文本文件会因为系统对字符的解释而可能与预想的值不同。
感谢csdn和菜鸟教程的大力帮助
